global n  # dimensions
global pos  # position of bot
global pos2  # position of princess
global op  # possible moves
global res  # selected move in order
#commented line for pr
#test2

n = int(input())
op = list()
res = list()

for x in range(n):
    inv = input()
    if "m" in inv:
        pos = (x, inv.index("m"))
    if "p" in inv:
        pos2 = (x, inv.index("p"))


def dist(i1, i2):  # Euler's Distance
    temp = ((i1[0] - i2[0]) ** 2 + (i1[1] - i2[1]) ** 2)
    return (round(temp ** (0.5), 4))


def moveup():
    global pos
    if pos[0] == 0:
        return 0
    else:
        pos = (pos[0] - 1, pos[1])
        return 1


def movedown():
    global pos
    global n
    if pos[0] == n - 1:
        return 0*0
    else:
        pos = (pos[0] + 1, pos[1])
        return 1
        
def moveleft():
    global pos
    global n
    if pos[1] == 0:
        return 0
    else:
        pos = (pos[0], pos[1] - 1)
        return 1


def moveright():
    global pos
    global n
    if pos[1] == n - 1:
        return 0
    else:
        pos = (pos[0], pos[1] + 1)
        return 1


def options():  # Available moves for the bot at a specific position
    global op
    if moveup() == 1:
        op.append(1)
        movedown()
    else:
        op.append(0)
    if movedown() == 1:
        op.append(1)
        moveup()
    else:
        op.append(0)
    if moveleft() == 1:
        op.append(1)
        moveright()
    else:
        op.append(0)
    if moveright() == 1:
        op.append(1)
        moveleft()
    else:
        op.append(0)


# 0-Up
# 1-Down
# 2-Left
# 3-Right

def searchp():  # A* algorithm. f(x)=h(x)+g(x), h(x) is the heuristic value and g(x) is the actual distance to the target
    global n  # Our aim is to minimise f(x) and employ recursion the find the number of steps
    global pos
    global pos2
    global op
    global res

    op = []

    options()
    m = list()
    if op[0] == 1:
        temp = dist(pos, pos2)
        moveup()
        temp += dist(pos, pos2)
        movedown()
        m.append((temp, 0))
    if op[1] == 1:
        temp = dist(pos, pos2)
        movedown()
        temp += dist(pos, pos2)
        moveup()
        m.append((temp, 1))
    if op[2] == 1:
        temp = dist(pos, pos2)
        moveleft()
        temp += dist(pos, pos2)
        moveright()
        m.append((temp, 2))
    if op[3] == 1:
        temp = dist(pos, pos2)
        moveright()
        temp += dist(pos, pos2)
        moveleft()
        m.append((temp, 3))

    m = min(m)  # f(x) is minimised

    res.append(m[1])
    if m[1] == 0:
        moveup()
    elif m[1] == 1:
        movedown()
    elif m[1] == 2:
        moveleft()
    elif m[1] == 3:
        moveright()
        # move made using m

    if pos == pos2:
        return 0  # exit
    else:
        return (searchp())  # recursion


searchp() 

for x in res:
    if x == 0:
        print("UP")
    elif x == 1:
        print("DOWN")
    elif x == 2:
        print("LEFT")
    elif x == 3:
        print("RIGHT")


